import java.util.*;

class Movie {
    String title;
    List<String> genres;

    Movie(String title, List<String> genres) {
        this.title = title;
        this.genres = genres;
    }

    @Override
    public String toString() {
        return title + " (" + String.join(", ", genres) + ")";
    }
}

class User {
    String name;
    Map<Movie, Integer> ratings;

    User(String name) {
        this.name = name;
        this.ratings = new HashMap<>();
    }

    void rateMovie(Movie movie, int rating) {
        ratings.put(movie, rating);
    }

    Map<String, Double> calculateGenrePreference() {
        Map<String, Double> genreScores = new HashMap<>();
        int totalRatings = 0;

        for (Map.Entry<Movie, Integer> entry : ratings.entrySet()) {
            Movie movie = entry.getKey();
            int rating = entry.getValue();
            totalRatings += rating;

            for (String genre : movie.genres) {
                genreScores.put(genre, genreScores.getOrDefault(genre, 0.0) + rating);
            }
        }

        for (Map.Entry<String, Double> entry : genreScores.entrySet()) {
            genreScores.put(entry.getKey(), entry.getValue() / totalRatings);
        }

        return genreScores;
    }
}

class Recommender {
    List<Movie> movies;

    Recommender(List<Movie> movies) {
        this.movies = movies;
    }

    List<Movie> recommendMovies(User user) {
        Map<String, Double> genrePreference = user.calculateGenrePreference();
        List<Movie> recommendations = new ArrayList<>();

        for (Movie movie : movies) {
            if (!user.ratings.containsKey(movie)) {
                double score = 0.0;
                for (String genre : movie.genres) {
                    score += genrePreference.getOrDefault(genre, 0.0);
                }
                if (score > 0) {
                    recommendations.add(movie);
                }
            }
        }

        recommendations.sort((m1, m2) -> Double.compare(
                calculateMovieScore(m2, genrePreference),
                calculateMovieScore(m1, genrePreference)
        ));

        return recommendations;
    }

    private double calculateMovieScore(Movie movie, Map<String, Double> genrePreference) {
        double score = 0.0;
        for (String genre : movie.genres) {
            score += genrePreference.getOrDefault(genre, 0.0);
        }
        return score;
    }
}

public class RecommendationSystem {
    public static void main(String[] args) {
        // Sample movies
        Movie m1 = new Movie("Action Movie 1", Arrays.asList("Action", "Thriller"));
        Movie m2 = new Movie("Drama Movie 1", Arrays.asList("Drama", "Romance"));
        Movie m3 = new Movie("Action Movie 2", Arrays.asList("Action", "Adventure"));
        Movie m4 = new Movie("Comedy Movie 1", Arrays.asList("Comedy", "Family"));
        Movie m5 = new Movie("Drama Movie 2", Arrays.asList("Drama"));

        List<Movie> movieList = Arrays.asList(m1, m2, m3, m4, m5);

        // Sample user
        User user = new User("John");
        user.rateMovie(m1, 5); // Strong preference for Action/Thriller
        user.rateMovie(m2, 3); // Moderate preference for Drama/Romance

        // Recommender system
        Recommender recommender = new Recommender(movieList);
        List<Movie> recommendations = recommender.recommendMovies(user);

        // Print recommendations
        System.out.println("Recommended movies for " + user.name + ":");
        for (Movie movie : recommendations) {
            System.out.println(movie);
        }
    }
}
